"""
##### 0) Header #####
# Text Adventure Game
A chance to make your own Text Adventure Game.
This is an INDIVIDUAL project. Do not consult with others or share code.
Refer to the instructions on Canvas for more information.

# When You Are Done
When you pass all tests, remember to clean and document your code.
Be sure to unit test and document your functions.
"""

##### 1) Author Info #####

# Change these three fields
__author__ = "20butasbras@washk12.org"
__title__ = "Here comes the big sad."
__description__ = "Defend against the big sad and fight against the depression is tries to go for."

# Leave these two fields unchanged
__version__ = 1.69
__date__ = "October 21, 2019"


##### 2) Record Definitions #####
# Add a new record and modify the existing ones to fit your game.

'''
Records:
    World:
        status (str): Whether or not the game is "playing", "won",
                      "quit", or "lost". Initially "playing".
        map (dict[str: Location]): The lookup dictionary matching 
                                   location names to their
                                   information.
        player (Player): The player character's information.

      
    Player:
        location (str): The name of the player's current location.
        inventory (list[str]): The player's collection of items.
                               Initially empty.

    Location:
        about (str): A sentence that describes what this location 
                     looks like.
        neighbors (list[str]): A list of the names of other places 
                               that you can reach from this 
                               location.
        stuff (list[str]): A collection of things available at 
                           this location.
    Person:
      name (str): Fake friend 
      annoying (bool): True if the person is fake and performs anger to people
'''

##### 3) Core Game Functions #####
# Implement the following to create your game.

def render_introduction():
    '''
    Create the message to be displayed at the start of your game.
    
    Returns:
        str: The introductory text of your game to be displayed.
    '''
    return ("== Bdogs big sad adventure ==\n" +
            " = by Bdog trying to live through school =\n\n" +
            "Right before getting to school, Mr alvey decides to =\n" +
            "go sleep for another 3 hours so he skips potentially the \n" +
            "first 3 classes of the day that he has because of it \n" +
            "he cannot wait until lunch and screw around in the parking lot \n" +
            
    def annoying_kids():
    '''
    Return a random list of the annoying kids you can think of
    '''

    def chilled_out_teachers():
    '''
    Return a list of all of the teachers that I find very laid back    

    '''
    def create_map():
            '''
            Create a dictionary of the world map
            
            Returns:
                Map
            '''
            
            return {
                'classroom'  : {
                    'about' : 'You are at risk of ditching class by sleeping too much. Kids are doing
                                'stupid stuff that they always find funny for some odd reason.' ,
                                'neighbors' : ['class' , 'car'],
                                'stuff': ['nyquil' , 'premierprotein', 'ditch class day'],
                                'people': weird_kids()
                                },
                                'class' : {
                                    'about': 'You chillin in health class and Hosner yells at you for
                                    'for eating takis in his classroom.',
                                    'neighbors' : ['classroom'],
                                    'stuff': ['salt', 'pepper'],
                                    'people': ['Dallin', 'Devin', 'Isaiah', 'Ethan', 'Phillip', 'B-Dog']
                                },
                                'car' : {
                                    'about': 'You start your car up and you start messing around in parking lot.',
                                    'neighbors' : ['school', 'home'],
                                    'stuff': ['keys' , 'air horn']
                                    'people': [],
                                    },
                                
                                    'school' : {
                                        'about':  'You suddenly become instanlty depressed soon as you wake up and time
                                    'to have your day to be started',
                                        'neighbors'  : ['car', 'lunch'],
                                        'stuff':  ['pencils, backpack'],
                                        'people':  ['Dalin', 'Devin', 'Isaiah'],
                                        
                                    },
                                    'lunch' : {
                                        'about': 'You finally get done with all the torcher being done to you.',
                                        'neighbors' :['school'],
                                        'stuff': ['fast food'],
                                        'people': careless_employees(),
                                        },
                                    'archam' : {
                                        'neighbors' : ['home'],
                                        'stuff'" ['air horn, 'drink cup'],
                                        'people': ['Troller', 'Prankster', 'Comedian', 'Funny Guy', 'Jokester']
                                        },
                                        'home' : {
                                            'about': 'Congradulations! You finally made it home and able to look at meme
                                        'and able to practice and get better at Smash Bros!'
                                        'neighbors' : [],
                                        'stuff': [],
                                        'people': []
                                        }
                                    }
                
                                    
    
    
    def render_visible_stuff(world):
            '''
            Consumes a class and produces a string of visible items
            '''
            location = world['player']['location']
            here = class['map'][location]
            stuff = here['stuff']
            inventory = class['player'][inventory']

            if locatoin == 'classroom'"
                return "You see a desk that might have something useful to you inside."
            else:
                stuff_string = ""
                for thing in stuff:
                    stuff_strin += thing + ', '
                    return "You see" + stuff_string
    

    def render(world):
            '''
            Consumes a class and produces a string that will describe the current state
            of the world. Does not print.
            
            Args:
                world (World): The current class to describe.
                
            Returns:
                str: A textual description of the class.
            '''
            return (render_location(class) +
                    render_player(world) +
                    render_visible_stuff(world))



def get_options(world):
    '''
    Consumes a world and produces a list of strings representing the options
    that are available to be chosen given this state.
    
    Args:
        world (World): The current world to get options for.
    
    Returns:
        list[str]: The list of commands that the user can choose from.
    '''

def update(world, command):
    '''
    Consumes a world and a command and updates the world according to the
    command, also producing a message about the update that occurred. This
    function should modify the world given, not produce a new one.
    
    Args:
        world (World): The current world to modify.
    
    Returns:
        str: A message describing the change that occurred in the world.
    '''

def render_ending(world):
    '''
    Create the message to be displayed at the end of your game.
    
    Args:
        world (World): The final world state to use in describing the ending.
    
    Returns:
        str: The ending text of your game to be displayed.
    '''

def choose(options):
    '''
    Consumes a list of commands, prints them for the user, takes in user input
    for the command that the user wants (prompting repeatedly until a valid
    command is chosen), and then returns the command that was chosen.
    
    Note:
        Use your answer to Programming Problem #42.3
    
    Args:
        options (list[str]): The potential commands to select from.
    
    Returns:
        str: The command that was selected by the user.
    '''

###### 4) Win/Lose Paths #####
# The autograder will use these to try out your game
# WIN_PATH (list[str]): A list of commands that win the game when entered
# LOSE_PATH (list[str]): A list of commands that lose the game when entered.

WIN_PATH = []
LOSE_PATH = []
    
###### 5) Unit Tests #####
# Write unit tests here

from cisc108 import assert_equal


###### 6) Main Function #####
# Do not modify this area

def main():
    '''
    Run your game using the Text Adventure console engine.
    Consumes and produces nothing, but prints and indirectly takes user input.
    '''
    print(render_introduction())
    world = create_world()
    while world['status'] == 'playing':
        print(render(world))
        options = get_options(world)
        command = choose(options)
        print(update(world, command))
    print(render_ending(world))

if __name__ == '__main__':
    main()




